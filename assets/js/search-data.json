{
  
    
        "post0": {
            "title": "20210531 DT스쿨!",
            "content": ". inventory = {} while True: product = input(&#39;물건이름: &#39;) if product == &#39;&#39;: break number = int(input(&#39;개수: &#39;)) if product in inventory.keys(): inventory[product] += number else: inventory[product] = number print(inventory) for key, value in sorted(inventory.items()): print(key, value, end=&#39; &#39;) . 물건이름: 1 개수: 10 물건이름: 2 개수: 10 물건이름: 3 개수: 10 물건이름: 2 개수: 5 물건이름: {&#39;1&#39;: 10, &#39;2&#39;: 15, &#39;3&#39;: 10} 1 10 2 15 3 10 . &#51665;&#54633;(set) . 자료들이 순서와 중복 없이 저장된 것 . 중괄호{} 안에 요소를 쉼표로 구분하여 나열한다 . Set_name = {value1, value2, ... , valueN} . set_snack = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;]) set_snack . {&#39;새우깡&#39;, &#39;썬칩&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . &#51665;&#54633;(set) &gt; &#49373;&#49457; . 집합명 = {요소1, 요소2, ... , 요소N} . 집합명 = set([요소1, 요소2, ... 요소N]) . set_snack = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;} set_snack . {&#39;새우깡&#39;, &#39;썬칩&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . set_snack = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;]) set_snack . TypeError Traceback (most recent call last) &lt;ipython-input-10-ee33fcfba6d5&gt; in &lt;module&gt;() -&gt; 1 set_snack = set(&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;) 2 set_snack TypeError: set expected at most 1 arguments, got 5 . set_str = set(&#39;hello&#39;) set_str . {&#39;e&#39;, &#39;h&#39;, &#39;l&#39;, &#39;o&#39;} . set_str = {&#39;hello&#39;, &#39;why&#39;, &#39;so&#39;, &#39;serious&#39;, &#39;why&#39;} set_str . {&#39;hello&#39;, &#39;serious&#39;, &#39;so&#39;, &#39;why&#39;} . &#51665;&#54633;(set) &gt; &#50836;&#49548; &#52628;&#52636; . 집합 자료형은 순서가 없기 때문에 인덱싱으로 값을 얻을 수 없다. . 집합 자료형에 저장된 값을 인덱싱으로 접근하려면 리스트나 튜플로 변환하여 사용한다. . set_snack = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;]) list_snack = list(set_snack) print(list_snack) print(list_snack[2]) . [&#39;썬칩&#39;, &#39;포카칩&#39;, &#39;새우깡&#39;, &#39;오감자&#39;] 새우깡 . set_snack = set([&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;]) list_snack = tuple(set_snack) print(list_snack) print(list_snack[2]) . (&#39;썬칩&#39;, &#39;포카칩&#39;, &#39;새우깡&#39;, &#39;오감자&#39;) 새우깡 . &#51665;&#54633;(set) &gt; &#50672;&#49328; . a와 b의 합집합 a.union(b) a|b . a와 b의 교집합 a.intersection(b) a&amp;b . a와 b의 차집합 a.difference(b) a-b . sweety = {&#39;빼빼로&#39;, &#39;칸초&#39;, &#39;칙촉&#39;, &#39;허니버터&#39;} salty = {&#39;허니버터&#39;, &#39;포카칩&#39;, &#39;새우깡&#39;} # 합집합 print(sweety.union(salty)) print(sweety|salty) # 교집합 print(sweety.intersection(salty)) print(sweety&amp;salty) # 차집합 print(sweety.difference(salty)) print(sweety-salty) print(salty.difference(sweety)) print(salty-sweety) #리스트에서 중복을 제거하거나 체크하기 위해 집합 주로 사용 . {&#39;허니버터&#39;, &#39;빼빼로&#39;, &#39;칙촉&#39;, &#39;새우깡&#39;, &#39;포카칩&#39;, &#39;칸초&#39;} {&#39;허니버터&#39;, &#39;빼빼로&#39;, &#39;칙촉&#39;, &#39;새우깡&#39;, &#39;포카칩&#39;, &#39;칸초&#39;} {&#39;허니버터&#39;} {&#39;허니버터&#39;} {&#39;빼빼로&#39;, &#39;칸초&#39;, &#39;칙촉&#39;} {&#39;빼빼로&#39;, &#39;칸초&#39;, &#39;칙촉&#39;} {&#39;새우깡&#39;, &#39;포카칩&#39;} {&#39;새우깡&#39;, &#39;포카칩&#39;} . &#51665;&#54633;(set) &gt; &#50836;&#49548;&#52628;&#44032; . 집합명.add(요소) = 1개 추가 . set_snack = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;} set_snack.add(&#39;허니버터&#39;) set_snack . {&#39;새우깡&#39;, &#39;썬칩&#39;, &#39;오감자&#39;, &#39;포카칩&#39;, &#39;허니버터&#39;} . 집합명.update(리스트) = 여러 개 추가 . set_snack = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;} set_snack.update([&#39;허니버터&#39;, &#39;칸초&#39;]) set_snack . {&#39;새우깡&#39;, &#39;썬칩&#39;, &#39;오감자&#39;, &#39;칸초&#39;, &#39;포카칩&#39;, &#39;허니버터&#39;} . &#51665;&#54633;(set) &gt; &#50836;&#49548;&#49325;&#51228; . 집합명.remove(요소) . 인덱스 값이 없기 때문에 요소로 삭제하는 remove만 이용 가능(del, pop 이런거 안됨) . set_snack = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;} set_snack.remove(&#39;새우깡&#39;) set_snack . {&#39;썬칩&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . set_snack = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;} set_snack.remove(&#39;포스틱&#39;) set_snack . KeyError Traceback (most recent call last) &lt;ipython-input-22-b171fe43bd6f&gt; in &lt;module&gt;() 1 set_snack = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;} -&gt; 2 set_snack.remove(&#39;포스틱&#39;) 3 set_snack KeyError: &#39;포스틱&#39; . set_snack = {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;썬칩&#39;, &#39;포카칩&#39;, &#39;썬칩&#39;} if &#39;썬칩&#39; in list(set_snack): set_snack.remove(&#39;썬칩&#39;) set_snack . {&#39;새우깡&#39;, &#39;오감자&#39;, &#39;포카칩&#39;} . &#50724;&#47448; &#47700;&#49884;&#51648; &#54644;&#49437; . NameError :참조변수 없음 . print(num) . NameError Traceback (most recent call last) &lt;ipython-input-24-55a60ae9504f&gt; in &lt;module&gt;() -&gt; 1 print(num) NameError: name &#39;num&#39; is not defined . SyntaxError :문법이 잘못되었음 (오타, 괄호를 제대로 닫지 않았을 때, 콜론(:)을 잘못 썼을 때) . print(num): . File &#34;&lt;ipython-input-25-6f556db8ea57&gt;&#34;, line 1 print(num): ^ SyntaxError: invalid syntax . TypeError :타입이 맞지 않음 . a, b = &#39;1&#39;, &#39;2&#39; c = a - b print(d) . TypeError Traceback (most recent call last) &lt;ipython-input-27-7f371145da01&gt; in &lt;module&gt;() 1 a, b = &#39;1&#39;, &#39;2&#39; -&gt; 2 c = a - b 3 print(d) TypeError: unsupported operand type(s) for -: &#39;str&#39; and &#39;str&#39; . ZerodivisionError :0으로 나눌 수 없음 . a, b = 1, 0 c = a/b print(c) . ZeroDivisionError Traceback (most recent call last) &lt;ipython-input-29-7a5251cbbd36&gt; in &lt;module&gt;() 1 a, b = 1, 0 -&gt; 2 c = a/b 3 print(c) ZeroDivisionError: division by zero . IndentationError :들여쓰기 오류 . print(1) print(2) . File &#34;&lt;ipython-input-28-d78587176f97&gt;&#34;, line 2 print(2) ^ IndentationError: unexpected indent . &#54532;&#47196;&#44536;&#47016;&#51032; 3&#44032;&#51648; &#44592;&#48376; &#51228;&#50612;&#44396;&#51312; . 순차구조 . : 명령들이 순차적으로 실행되는 구조 . | 선택구조 . : 조건에 따라 명령을 선택하여 실행되는 구조 . | 반복구조 . : 동일한 명령이 반복되면서 실행되는 구조 . | &#49440;&#53469;&#44396;&#51312; . 조건일때만 실행 . :&gt; 조건일때와 아닐 때로 분기 : . 조건이 여러개 일 때 . :만일 신호등이 빨간불이면 . &#39;&#39;&#39; if 조건: 명령어 ex) if 열이난다면 해열제를 먹이세요 &#39;&#39;&#39; . NameError Traceback (most recent call last) &lt;ipython-input-30-81ae9d2444bc&gt; in &lt;module&gt;() -&gt; 1 if 조건: 2 명령어 NameError: name &#39;조건&#39; is not defined . &#39;&#39;&#39; if 조건: 명령어 else: 명령어 ex) if 비가오면: 영화관에서 만나자 else: 공원에서 만나자 &#39;&#39;&#39; . &#39;&#39;&#39; if 조건: 명령어1 elif: 명령어2 ex) if 빨간불이면: 멈추세요 elif 노란불이면: 서행하세요 elif 초록불이면: 주행하세요 &#39;&#39;&#39; . &#39;&#39;&#39; if 조건: 명령어1 elif 조건: 명령어2 else: 명령어3 ex) if 빨간불이면: 멈추세요 elif 노란불이면: 서행하세요 elif 초록불이면: 주행하세요 else: 신호등 고장 &#39;&#39;&#39; . &#39;&#39;&#39; if 조건: 명령어1 if 조건: 명령어2 else: 명령어3 ex) if 빨간불이면: 멈추세요 elif 노란불이면: 서행하세요 elif 초록불이면: 주행하세요 if 구급차등장: 비키고 서행하세요 else: 신호등 고장 &#39;&#39;&#39; . &#39;&#39;&#39; if 조건식: 코드블록 &#39;&#39;&#39; #조건식의 결과가 참일 때 코드블록 명령 수행, 참이 아니면 건너뜀 . &#53076;&#46300;&#48660;&#47197; . 콜론(:) 아랫줄부터 들여쓰기 된 부분을 명령문 블록 또는 코드블록이라고 한다.&gt; 들여쓰기 간격은 같아야하며, 콜론(:)을 사용하면 자동으로 들여쓰기 된 채로 다음 줄이 시작된다. . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . 끝 . a = 1 if a &lt; 0: print(&#39;a는 0보다 작다.&#39;) print(&#39;a는 음수이다.&#39;) print(&#39;끝&#39;) . a는 음수이다. 끝 . temp = float(input(&#39;체온: &#39;)) if temp &gt; 37.5: print(&#39;입장불가&#39;) . 체온: 38 입장불가 . temp = float(input(&#39;체온: &#39;)) if temp &gt; 37.5: print(&#39;입장불가&#39;) else: print(&#39;정상입니다.&#39;) . temp = float(input(&#39;체온: &#39;)) medical_check = input(&#39;Y/N: &#39;) quarantine = input(&#39;Y/N: &#39;) if temp &gt; 37.5: print(&#39;발열기준 초과: 등교 불가&#39;) elif medical_check == &#39;Y&#39;: print(&#39;검사대기 중 등교 불가&#39;) elif quarantine == &#39;Y&#39;: print(&#39;자가격리 중 등교 불가&#39;) else: print(&#39;정상, 등교 가능&#39;) . 체온: 37 Y/N: N Y/N: N 정상, 등교 가능 . # &gt; 점수 입력받고 점수의 범위에 따라 등급을 출력하는 프로그램을 작성하세요 score = int(input(&#39;점수를 입력하세요: &#39;) if score &gt; 89: print(&#39;등급: A&#39;) elif 89 &gt;= score &gt; 79: print(&#39;등급: B&#39;) elif 79 &gt;= score &gt; 69: print(&#39;등급: C&#39;) elif 69 &gt;= score &gt; 59: print(&#39;등급: D&#39;) else score &lt; 59: print(&#39;등급: F&#39;) . File &#34;&lt;ipython-input-42-684fca4bab37&gt;&#34;, line 5 if score &gt; 89: ^ SyntaxError: invalid syntax .",
            "url": "https://tapiboss.github.io/kierkeblog/2021/06/06/_6%ED%8C%80_%EC%9C%A0%EC%8A%B9%ED%95%9C.html",
            "relUrl": "/2021/06/06/_6%ED%8C%80_%EC%9C%A0%EC%8A%B9%ED%95%9C.html",
            "date": " • Jun 6, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://tapiboss.github.io/kierkeblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://tapiboss.github.io/kierkeblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://tapiboss.github.io/kierkeblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://tapiboss.github.io/kierkeblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}